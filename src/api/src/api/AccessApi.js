/*
 * GOOFR Store
 * API documentation for GOOFR Store, a digital game store.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help.goofrportugal@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ClientAccessSchema} from '../model/ClientAccessSchema';
import {ClientSchema} from '../model/ClientSchema';
import {ErrorSchema} from '../model/ErrorSchema';
import {RegisterClientSchema} from '../model/RegisterClientSchema';

/**
* Access service.
* @module api/AccessApi
* @version 1.0.0
*/
export class AccessApi {

    /**
    * Constructs a new AccessApi. 
    * @alias module:api/AccessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the accessPut operation.
     * @callback moduleapi/AccessApi~accessPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a client access
     * @param {module:model/ClientAccessSchema} body 
     * @param {String} clientID Client ID
     * @param {module:api/AccessApi~accessPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accessPut(body, clientID, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling accessPut");
      }
      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling accessPut");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'clientID': clientID
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/access', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the loginPost operation.
     * @callback moduleapi/AccessApi~loginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in to a client&#x27;s account
     * @param {module:model/ClientAccessSchema} body 
     * @param {module:api/AccessApi~loginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    loginPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling loginPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientSchema;

      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the registerPost operation.
     * @callback moduleapi/AccessApi~registerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a client
     * @param {module:model/RegisterClientSchema} body 
     * @param {module:api/AccessApi~registerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    registerPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling registerPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientSchema;

      return this.apiClient.callApi(
        '/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}