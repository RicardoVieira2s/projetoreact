/*
 * GOOFR Store
 * API documentation for GOOFR Store, a digital game store.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help.goofrportugal@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {GameImageSchema} from '../model/GameImageSchema';
import {GameSchema} from '../model/GameSchema';
import {TagSchema} from '../model/TagSchema';

/**
* Game service.
* @module api/GameApi
* @version 1.0.0
*/
export class GameApi {

    /**
    * Constructs a new GameApi. 
    * @alias module:api/GameApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the gameDelete operation.
     * @callback moduleapi/GameApi~gameDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a game
     * @param {String} id Game ID
     * @param {module:api/GameApi~gameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gameDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameDelete");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameSchema;

      return this.apiClient.callApi(
        '/game', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gameGet operation.
     * @callback moduleapi/GameApi~gameGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GameSchema>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a game
     * Gets a game by ID or gets all games if no ID is given
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Game ID
     * @param {module:api/GameApi~gameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gameGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GameSchema];

      return this.apiClient.callApi(
        '/game', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gameImageDelete operation.
     * @callback moduleapi/GameApi~gameImageDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameImageSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an image from a game
     * @param {String} id Image ID
     * @param {module:api/GameApi~gameImageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gameImageDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameImageDelete");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameImageSchema;

      return this.apiClient.callApi(
        '/gameImage', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gameImageGet operation.
     * @callback moduleapi/GameApi~gameImageGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GameImageSchema>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all images of a game
     * @param {String} id Game ID
     * @param {module:api/GameApi~gameImageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gameImageGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameImageGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GameImageSchema];

      return this.apiClient.callApi(
        '/gameImage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gameImagePost operation.
     * @callback moduleapi/GameApi~gameImagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an image to a game
     * @param {String} gameID Game ID
     * @param {String} image Image URL
     * @param {module:api/GameApi~gameImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameImagePost(gameID, image, callback) {
      
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling gameImagePost");
      }
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling gameImagePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'gameID': gameID,'image': image
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/gameImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gamePost operation.
     * @callback moduleapi/GameApi~gamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new game
     * @param {module:model/GameSchema} body 
     * @param {module:api/GameApi~gamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gamePost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gamePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameSchema;

      return this.apiClient.callApi(
        '/game', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gamePut operation.
     * @callback moduleapi/GameApi~gamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a game
     * @param {module:model/GameSchema} body 
     * @param {String} id Game ID
     * @param {module:api/GameApi~gamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gamePut(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gamePut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gamePut");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameSchema;

      return this.apiClient.callApi(
        '/game', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gameTagDelete operation.
     * @callback moduleapi/GameApi~gameTagDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a tag from a game
     * @param {String} gameID Game ID
     * @param {String} tagID Tag ID
     * @param {module:api/GameApi~gameTagDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gameTagDelete(gameID, tagID, callback) {
      
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling gameTagDelete");
      }
      // verify the required parameter 'tagID' is set
      if (tagID === undefined || tagID === null) {
        throw new Error("Missing the required parameter 'tagID' when calling gameTagDelete");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'gameID': gameID,'tagID': tagID
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagSchema;

      return this.apiClient.callApi(
        '/gameTag', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gameTagGet operation.
     * @callback moduleapi/GameApi~gameTagGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagSchema>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all tags of a game
     * @param {String} id Game ID
     * @param {module:api/GameApi~gameTagGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gameTagGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameTagGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagSchema];

      return this.apiClient.callApi(
        '/gameTag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gameTagPost operation.
     * @callback moduleapi/GameApi~gameTagPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a tag to a game
     * @param {String} gameID Game ID
     * @param {String} tagID Tag ID
     * @param {module:api/GameApi~gameTagPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameTagPost(gameID, tagID, callback) {
      
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling gameTagPost");
      }
      // verify the required parameter 'tagID' is set
      if (tagID === undefined || tagID === null) {
        throw new Error("Missing the required parameter 'tagID' when calling gameTagPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'gameID': gameID,'tagID': tagID
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/gameTag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}