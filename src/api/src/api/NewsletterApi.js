/*
 * GOOFR Store
 * API documentation for GOOFR Store, a digital game store.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help.goofrportugal@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorSchema} from '../model/ErrorSchema';
import {NewsletterBodySchema} from '../model/NewsletterBodySchema';
import {NewsletterSchema} from '../model/NewsletterSchema';

/**
* Newsletter service.
* @module api/NewsletterApi
* @version 1.0.0
*/
export class NewsletterApi {

    /**
    * Constructs a new NewsletterApi. 
    * @alias module:api/NewsletterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the newsletterDelete operation.
     * @callback moduleapi/NewsletterApi~newsletterDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewsletterSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an email from the newsletter list
     * @param {String} email Email to unsubscribe
     * @param {module:api/NewsletterApi~newsletterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    newsletterDelete(email, callback) {
      
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling newsletterDelete");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NewsletterSchema;

      return this.apiClient.callApi(
        '/newsletter', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the newsletterGet operation.
     * @callback moduleapi/NewsletterApi~newsletterGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NewsletterSchema>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of emails subscribed to the newsletter
     * Gets one registered email or all registered emails
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Email to search
     * @param {module:api/NewsletterApi~newsletterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    newsletterGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'email': opts['email']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NewsletterSchema];

      return this.apiClient.callApi(
        '/newsletter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the newsletterPost operation.
     * @callback moduleapi/NewsletterApi~newsletterPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an email to the newsletter list
     * @param {String} email Email to subscribe
     * @param {module:api/NewsletterApi~newsletterPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    newsletterPost(email, callback) {
      
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling newsletterPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/newsletter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendNewsletterPost operation.
     * @callback moduleapi/NewsletterApi~sendNewsletterPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a newsletter to all registered emails
     * @param {module:model/NewsletterBodySchema} body 
     * @param {module:api/NewsletterApi~sendNewsletterPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendNewsletterPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendNewsletterPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/sendNewsletter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}